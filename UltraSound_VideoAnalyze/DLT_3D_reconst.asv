%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%{
[function]
DLT法を用いて、３次元座標を導出するプログラム
詳細な使い方は松木さんのくれたテクストファイルの中に書いてある

[procedure]
pre: nothing
post: US_3D_traject

[pre preparation]
Save the csv file of the actual coordinates and image coordinates of the calibration frame in 'calibration' folder
(P_image_US~.csv & P_world_US.csv)


事前準備:
Calibrationフォルダの中にキャリブレーションフレームの実座標と画像座標のcsvファイルを保存しておく
DLC_csvfileの中にDeeplabcutのcsvファイルを全て保存しておく(csvファイルの入っているフォルダの名前は変数data_typeとあわせる)
63行目の、csvファイルの接頭語の指定を忘れない
DeepLabCutで動画からcsvファイルを出力する前に、動画の名前を変更する(CSVファイルの名前の変更とディレクトリの作成を行う関数を作ってもいいかも)
220000は腱付け替え前の刺激に対する動作解析結果
関数を作るとしたらDLC_csvfile/num2str(date)/data_typeというディレクトリを作成し(考えうるdata_typeのディレクトリは、全て作る)、nas-modelのcsvファイルを参照して持ってくる←めんどくさいから、手動でやってもいいかも
Get_WorldPosのカメラパラメータaと参照しているimagePosからの座標データが対応しているかどうか確認する
確認方法:キャリブレーションのcsvファイルのカメラ1のアングルと,datalistで最初に参照されるファイルのカメラアングルが等しければOK
(例)キャリブレーションのカメラ１のアングルがLで（事前に把握しておく）、datalist(66行目.のちに93行目でtempに代入される)で最初に参照されるファイルがLからのアングルであればOK(Lは左)


[注意点]
複数日に対応していない(変数'date'のデータ型はdouble型)

[改善点]
P_image_US~.csvとP_world_US.csvをGUI操作で画像から作成できるようなコードを作成する.
DLC_csvfileの選択もGUIで行えるようにする
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
%% set param
  setting.PNum = 3; %マーカーの数
  setting.CNum = 2; %カメラの数
  setting.P_cal = 8; %チェックポイントの数
  criterion = 0.9; %judge = 1の時に使用する域値 
  norm_cri = 30;%judge = 1の時に使用する。前フレームとの距離(ノルム)の閾値設定 
  individual_plot = 1; %個々のタスクの結果を出力するかどうか
  stack_plot = 0; %まとめたタスクの結果を出力するかどうか(この変数はUSのコードでは使用しない)
  date = 220000; %日付
  data_type = 'ulnar'; %刺激部位(ulnar,radial)
  
  setting.judge = 1;  output_useCam = 0; %output_usecamは, カメラ2台の場合は必要ない
  judge = setting.judge;

  setting.header = {'index-nail X', 'index-nail Y', 'index-nail Z', ...
                    'middle-nail X', 'middle-nail Y', 'middle-nail Z'...
                    'ring-nail X','ring-nail Y','ring-nail Z'}; %csvファイルのヘッダー(結果の保存(outputMatrix)に使用する)


  %% code section
  projectFolder = pwd;
  setting.saveFolder = strcat(projectFolder, '/DLT_result/'); %mac,windowsで変更が必要
  saveFolder = setting.saveFolder;

  % Get calibration information
  calfileName = strcat('P_image_US_', num2str(date), '.csv'); %calibration

  %calibrationフォルダ内の2つのcsvファイルの中身を読み込み
  P_image = csvread([projectFolder '/calibration/' num2str(date) '/' calfileName], 2, 1);%(3,2)が(1,1)になるようにオフセット
  P_world = csvread([projectFolder '/calibration/' num2str(date) '/P_world_US.csv'], 1, 1);

  % Estimation camera parameter
  CamParam = Get_CamParam(P_world, P_image, setting); %function which generate CamereaParameter

  PNum = setting.PNum;  CNum = setting.CNum;
  
  % Get list of csv files
%   folderName = [projectFolder '/DLC_csvfile/' num2str(date) '/' data_type];%カレントディレクトリのパスに'\DLC_csvfile'を連結したものをfoulderNameに代入
%   datalist  =  dir([folderName, '/FDS*.csv']); %./ファイルがあるとエラー吐くから注意(./ファイル対策で接頭語camを使用している) %この行の*.csvの前を変更する
DLC_csv_fold_path = fullfle(pw)
if isempty(datalist)
    error_msg = "datalistへの入力が不適切です、パラメータのファイル名を変更してください";
    disp(error_msg)
end
  
  datalist  =  {datalist.name}.';
  TrNum     = length(datalist) / CNum; % タスクの試行回数(csvファイルの数/カメラの数)

  for(j = 1 : TrNum)
    if j~=1
        clear imagePos;
        clear likelihood;
    end

    % Get experiment date and rat name(元のCSVファイルの6~13文字までを代入(6~13文字がちょうどトライアルの名前のとこに匹敵する))
    setting.exp_info{j, 1} = extractBefore(datalist{j}, 8);%datalistの13文字目までを代入
    %setting.exp_info{j, 1} = extractAfter(datalist{j}, 8); %setting.exp_info{j, 1}の6文字目以降を代入
    disp(setting.exp_info{j, 1});

    % Read csv file of 2D coordinates position on image(._ファイル等が生成されてエラー吐くことがあるから注意する)
    for(n = 1 : CNum)
      disp(datalist{j + TrNum * (n - 1)});
      temp = csvread([projectFolder '/DLC_csvfile/' num2str(date) '/' data_type '/' datalist{j + TrNum * (n - 1)}], 3, 1);%J:何タスク目か, TRNUM : タスクの総数 N:カメラの番号　(例：全て1ならカメラ１からのタスク1のcsvファイルを読み込む)
      f_start = 1; f_end = length(temp);
      if n ~= 1
          if f_end <length(imagePos) 
              imagePos = imagePos(1:f_end,:);
              likelihood = likelihood(1:f_end,:); 
          else
              f_end = length(imagePos);
          end
      end
      setting.f_start = f_start; setting.f_end = f_end;
 
      %imagePos
      for(i = 1 : PNum)
        imagePos(:, 2 * PNum * (n - 1) + 2 * i - 1)  = temp(f_start : f_end , 3 * i - 2); % x position
        imagePos(:, 2 * PNum * (n - 1) + 2 * i)      = temp(f_start : f_end , 3 * i - 1); % y position
        likelihood(:, PNum * (n - 1) + i)            = temp(f_start : f_end , 3 * i);
      end
    end

    [setting.useCam, setting.usecam_all_contents_sel, setting.P] = New_Select_Camera(setting, likelihood);
    useCam = setting.useCam;
    usecam_all_contents_sel = setting.usecam_all_contents_sel;
    usecam_all_contents{1,j} = usecam_all_contents_sel;

    % 3D coordinates reconstruction
    worldPos = zeros([f_end 3 * PNum]);
    worldPos_temp = zeros([f_end 3 * PNum]);
    %↓マーカーごとに三次元座標変換してwordlPosに代入
    for(i = 1 : length(setting.P))
      worldPos_temp = Get_worldPos(i, imagePos, CamParam, setting);
      worldPos = worldPos + worldPos_temp;
    end
    
    if judge == 1
        for ii = 1:PNum
            for jj = 1:length(likelihood)
                selected_cam = eval(['useCam.point' num2str(ii) '(' num2str(jj) ',:)']);
                if jj == 1
                    if likelihood(jj,ii)>criterion && likelihood(jj,ii+PNum)>criterion %ポイントiにおいて、選ばれた2台のカメラのlikelyhoodが２台ともcriterionを超える時
                        
                    else
                        worldPos(jj,(ii*3)-2) = 0/0; %0/0だとNaNが出力される
                        worldPos(jj,(ii*3)-1) = 0/0; 
                        worldPos(jj,(ii*3)) = 0/0; 
                    end
                else
                    if isnan(worldPos(jj-1,(ii*3)-2:ii*3))
                        if likelihood(jj,ii)>criterion && likelihood(jj,ii+PNum)>criterion
                        
                        else
                            worldPos(jj,(ii*3)-2) = 0/0; %0/0だとNaNが出力される
                            worldPos(jj,(ii*3)-1) = 0/0; 
                            worldPos(jj,(ii*3)) = 0/0; 
                        end
                    else
                        if  likelihood(jj,ii)>criterion && likelihood(jj,ii+PNum)>criterion && norm(worldPos(jj,(3*ii)-2:(3*ii))-worldPos(jj-1,(3*ii)-2:(3*ii)))<norm_cri
                   
                        else
                            worldPos(jj,(ii*3)-2) = 0/0; %0/0だとNaNが出力される
                            worldPos(jj,(ii*3)-1) = 0/0; 
                            worldPos(jj,(ii*3)) = 0/0; 
                        end
                        
                    end
                end
            end
        end
    end
    
    All_output{1,j} = worldPos;
    outputMatrix = {};
    outputMatrix(2 : f_end + 1, :) = num2cell(worldPos(f_start : f_end, :));
    %↓outputMatrixの1行目にヘッダーを挿入する
    for(i = 1 : 3 * PNum)
      outputMatrix{1, i} = setting.header{i};
    end
    %assignin('base', 'outputMatrix', outputMatrix);
    if(judge == 1)
      mkdir([saveFolder 'judgeON/' num2str(date) '/' data_type])
      filename = [saveFolder 'judgeON/' num2str(date) '/' data_type '/' data_type '_US_judgeON(' num2str(date) ').csv'];
    elseif(judge == 0)
      mkdir([saveFolder 'judgeOFF/' num2str(date) '/' data_type])
      filename = [saveFolder 'judgeOFF/' num2str(date) '/' data_type '/' data_type '_US_judgeOFF(' num2str(date) ').csv'];
    end
    
    Mac_user = 1;%macユーザーなら1(厳密にいうと、MATLABのバージョンによってはwritecellが使えないため、それを補填するために下記のコードがある)
    %↓outputMatrixをfilenameでcsvファイルとして保存
    if Mac_user == 1
        a = cell2table(outputMatrix);
        writetable(a,filename,'WriteVariableNames',false);
    else
        writecell(outputMatrix, filename);
    end
    %↑Macの方だとwritecellが使えない(cell配列をcsvファイルに保存したい→一度cell配列をtableに変換してから保存(make.csvを参照))
    %↓結果のプロット、図の保存の関数(関数内で定義される変数str2の変更が必要)
    if individual_plot == 1
        plot_result(j, setting, worldPos,date,data_type); %jはタスク回数
    end
    close all;
  end
  %assignin('base', 'useCam_all', useCam_all);
  if stack_plot == 1
    day_task_pose(All_output,setting)
  end
  if(output_useCam == 1)
    filename2 = strcat(saveFolder, date, '_useCam', '.csv');
    for ii = 1:length(setting.exp_info)
        for jj = 1:length(setting.P)
            useCam_all_header{1,PNum*2*(ii-1)+(2*jj-1)} = cellstr(strcat(setting.exp_info{ii, 1}, '_P', num2str(jj)));
            useCam_all_header{1,PNum*2*(ii-1)+(2*jj)} = '/'; 
        end
    end
    %↓タスクごとにフレーム数が違うので、このままだとcell2matができない。よってNaNを代入して配列のサイズを合わせる   
    %↓一番フレーム数の大きいタスクを探す
    for jj = 1:TrNum
        if jj == 1
            maxframe = length(usecam_all_contents{1,jj});
        elseif length(usecam_all_contents{1,jj}) > maxframe
            maxframe = length(usecam_all_contents{1,jj});
        end
    end
    %maxframeを基にNaNを代入して埋め合わせる
    for ii = 1:TrNum
        if length(usecam_all_contents{1,ii}) < maxframe
            comp_matrix = NaN(maxframe - length(usecam_all_contents{1,ii}),2*PNum);
            usecam_all_contents{1,ii} = [usecam_all_contents{1,ii} ; comp_matrix];
            %↑2*PNumは、使用したカメラ台数(現状のプログラムだと2で固定)と、ラベリングした部位(PNum)
        else
            
        end
    end
        
    c{1,1} = cell2mat(usecam_all_contents);
    [row,col] = size(c{1,1});
    for ii = 1:row
        for jj = 1:col
            contents{ii,jj} = num2cell(c{1,1}(ii,jj));
        end
    end
    useCam_all = [useCam_all_header;contents];
    if Mac_user == 1
        b = cell2table(useCam_all);
        writetable(b,filename2,'WriteVariableNames',false);
    else 
        writecell(useCam_all, filename2);
    end
  end

  close all;
